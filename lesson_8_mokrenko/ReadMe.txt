my_framework/ - содержит фреймоворк, поддерживающий  WSGI и соответствующий  стандарту PEP-3333.

main.py - это класс, имеющий callback-метод, созданный по стандарту WSGI:
   def __call__(self, environ, start_response):
   В коде метода будет вызов start_response. Зачем он нужен можно посмотреть в http://hlabs.org/development/python/wsgi.html.


templator.py - Наш шаблонизатор на основе jinja2. Здесь мы определяем где брать шаблоны и отправляем в jinja2.


run.py -  запускает легковесный веб-сервер, поддерживающий WSGI, для тестирования приложения прямо в pyCharm. 
При запуске веб-сервера листенером назначим наш фреймворк, которому будет передан FC и PC из urls.py.


utls.py - сожержит:
  - список функций-контроллеры фронта. Их м.б. много, они обеспечивают унификацию обработки всех страниц.
  - словарь адресов-маршрутов с указанием контроллеров страниц.


views.py - контроллеры страниц. Каждый контроллер имеет параметр request, содержащий данные, подготовленные фреймворком. 
Каждый контроллер возвращает два параметра: заголовок и тело страницы. Тело страницы может быть сформировано шаблонизатором.



------------------------------ТЕСТИРОВАНИЕ В WINDOWS-------------------------------------------
Для тестирования через uWSGI-сервер на Windows необходимо:

1) Установить ubuntu 20.04 LTS через Microsoft Store
2) 
sudo add-apt-repository universe
sudo apt update
sudo apt-get install -f
sudo apt install python3-pip
3)
pip install uwsgi
4) ПЕРЕЗАГРУЗКА НУЖНА UBUNTU! ИНАЧЕ ВОЗНИКАЕТ ОШИБКА
5)
cd /mnt/d/education/pythonPatterns/lesson_1_Mokrenko/fwsgi.py
uwsgi --http :8000 --wsgi-file fwsgi.py
Заходим по адресу http://127.0.0.1:8000/

------------------------------Порождающий паттенрны---------------------------------------------
1) По конпке "Добавить" на странице "Записная книжка":
- Добавляем новую задачу (если заполнили поле Задача), используя паттерн "Фабричный" метод
- Добавляем клон последней задачи (если НЕ заполнили поле Задача), используя паттерн "Прототип"

2) По кнопке ">>" на странице "Записная книжка" происходит переменщение строки на страницу Главная, 
используя паттерн "Прототип

3) Логгироавание сделано используя порождающий паттерн Singleton.

-----------------------------Поведенческие паттерны---------------------------------------------
1) "Стратегия" реализована в модуле strategies. Определяюет вариант записи лога - в файл или на экран. 
2) "Хранитель" реализован в модуле mementos. Используется во view SaveToJson и UploadFromJson.
3) "Наблюдатель реализован в модуле Observer. Нотификация наблюдателям о новой запланированной на сегодня задаче отправляется при вызове объекта класcа
CreateTaskScheduled. Перечень наблюдателей устанваливаем здесь же.
4) Шаблонные методы в templatemethods.py. ListView можно проверить через ссылку "Список всех задач" на главной странице. CreateView реализовн яерез TaskHeapedCreateView и м.б. проверен по кнопке "Добавить через CBV".
-----------------------------Архитектурные паттерны
1) Создается начальная БД с помощью скриптов.
2) Реализован в модуле mappperregistry.py DataMapper для трех классов, два из которых имеют таблицы БД. 
3) Переписаны все контроллеры на использование нового паттерна для работы с БД. Сохранение в БД происходит через использование UnitOfWork.


